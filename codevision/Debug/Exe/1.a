;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6/23/2017
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include <alcd.h>
;  char i,jump[6],j,k,t,time2,x,start=0,m=0,lcd[20],str[20];
;  float w=0,time,t1;
;  int  time1,loop,timing=0;
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;
;unsigned int read_adc(unsigned char adc_input)
; 0000 0024 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0025 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0026 // Delay needed for the stabilization of the ADC input voltage
; 0000 0027 delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 0028 // Start the AD conversion
; 0000 0029 ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002A // Wait for the AD conversion to complete
; 0000 002B while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002C ADCSRA|=(1<<ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 002D return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002E }
;PCODE: $00000021 VOL: 0
;
; void gameover(void)
; 0000 0031  {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0032    lcd_clear();
;PCODE: $00000024 VOL: 0
; 0000 0033    printf("final score:");
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0034    putchar(13);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0035    ftoa(w,1,str);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0036    sprintf(lcd,"%5s",str);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0037    puts(lcd);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0038    putchar(13);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0039    start=0;
;PCODE: $00000044 VOL: 0
; 0000 003A 
; 0000 003B    for(i=0;i<4;i++){
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 003C    lcd_clear();
;PCODE: $0000004C VOL: 0
; 0000 003D    lcd_gotoxy(3,1);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 003E    lcd_puts("GAME OVER");
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 003F    delay_ms(500);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0040    lcd_clear();
;PCODE: $00000056 VOL: 0
; 0000 0041    delay_ms(500);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0042    }
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0043 
; 0000 0044    ftoa(w,1,str);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0045    sprintf(lcd,"YOUR SCORE IS:%5s",str);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0046    lcd_clear();
;PCODE: $0000006F VOL: 0
; 0000 0047    lcd_gotoxy(0,1);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0048    lcd_puts(lcd);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0049    delay_ms(2000);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 004A    while(1){start=0;}
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 004B  }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0

	.DSEG
_0x9:
	.BYTE 0xA
; float difficulty(void)
; 0000 004D  {

	.CSEG
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 004E    time1=read_adc(0);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 004F    t1=(time1*1.2)/1023+.3;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0050    time2=(int)(t1*10);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0051    time=time2/10+(time2%10)*.1;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0052    return time;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0053  }
;PCODE: $000000A4 VOL: 0
;
; void chap(void)
; 0000 0056 {
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0057        time=difficulty();
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0058        t=m*3;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0059        for(j=0;j<=t;j=j+3)
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 005A        {
; 0000 005B       for(i=0;i<4;i++)
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 005C       {
; 0000 005D         if(i!=jump[j/3])
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 005E         {
; 0000 005F           lcd_gotoxy(j,i);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0060           lcd_puts("|");
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0061           lcd_gotoxy(13,x);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0062           lcd_puts("*");
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0063         }
; 0000 0064        }
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0065        }
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0066 }
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0

	.DSEG
_0x14:
	.BYTE 0x4
; interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0068 {

	.CSEG
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0069 if(start!=0){
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 006A if(x!=3){
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 006B x=x+1;
;PCODE: $000000E6 VOL: 0
; 0000 006C lcd_clear();
;PCODE: $000000E7 VOL: 0
; 0000 006D chap();
;PCODE: $000000E8 VOL: 0
; 0000 006E }
; 0000 006F }
;PCODE: $000000E9 VOL: 0
; 0000 0070 }
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;
;
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0074 {
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0075 if(start!=0){
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0076 if(x!=0){
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0077 x=x-1;
;PCODE: $000000F4 VOL: 0
; 0000 0078 lcd_clear();
;PCODE: $000000F5 VOL: 0
; 0000 0079 chap();
;PCODE: $000000F6 VOL: 0
; 0000 007A }
; 0000 007B }
;PCODE: $000000F7 VOL: 0
; 0000 007C }
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 007F {
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0080 
; 0000 0081   start=1;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0082 
; 0000 0083 }
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;void delay(void)
; 0000 0085 {
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0086    loop=time*40;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0087    timing=0;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0088    while(timing<loop)
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0089    {
; 0000 008A    }
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 008B }
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 008D {
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 008E 
; 0000 008F TCNT0=0x3D;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0090 timing++;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0091 }
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;
;
;void main(void)
; 0000 0095 {
;PCODE: $00000121 VOL: 0
; 0000 0096 GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0097 MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0098 MCUCSR=(0<<ISC2);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0099 GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 009A ADMUX=ADC_VREF_TYPE;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 009B ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 009C SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 009D UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 009E UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 009F UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00A0 UBRRH=0x00;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00A1 UBRRL=0x33;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00A2 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00A3 TCNT0=0x3D;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00A4 OCR0=0x00;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00A5 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00A6 #asm("sei")
;PCODE: $00000143 VOL: 0
	sei
;PCODE: $00000144 VOL: 0
; 0000 00A7 lcd_init(16);
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00A8 DDRD=0X00;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00A9 PORTD=0XFF;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00AA DDRB=0X00;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00AB PORTB=0XFF;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00AC lcd_gotoxy(4,1);
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00AD lcd_puts("WELCOME!");
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00AE delay_ms(2000);
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00AF while (1)
;PCODE: $00000158 VOL: 0
; 0000 00B0       {
; 0000 00B1         if(start!=0){
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00B2         lcd_clear();
;PCODE: $0000015B VOL: 0
; 0000 00B3          for(k=0;k<5;k=k+1){
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00B4         jump[5-k]=jump[4-k];
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00B5         }
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00B6         jump[0]=(int)((rand()/(RAND_MAX/4)));
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00B7         chap();
;PCODE: $0000017C VOL: 0
; 0000 00B8 
; 0000 00B9          if(m==5){
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00BA 
; 0000 00BB          if(x!=jump[5])
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00BC          {
; 0000 00BD          gameover();
;PCODE: $00000184 VOL: 0
; 0000 00BE          }
; 0000 00BF           w=1+(1.5-time)/.6+w;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00C0          }
; 0000 00C1          delay();
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 00C2 
; 0000 00C3          //delay_ms(time*1000);
; 0000 00C4 
; 0000 00C5         m++;
;PCODE: $00000193 VOL: 0
; 0000 00C6         if(m>5)
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 00C7         {
; 0000 00C8          m=5;
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 00C9         }
; 0000 00CA 
; 0000 00CB          //timer_off();
; 0000 00CC 
; 0000 00CD          ftoa(w,1,str);
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 00CE          sprintf(lcd,"%5s",str);
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 00CF          puts(lcd);
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 00D0          putchar(13);
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 00D1 
; 0000 00D2 
; 0000 00D3        }
; 0000 00D4        if(start==0)
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 00D5        {
; 0000 00D6          time=difficulty();
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 00D7          ftoa(time,1,str);
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 00D8          sprintf(lcd,"HARDNESS:%4s",str);
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 00D9          lcd_clear();
;PCODE: $000001C7 VOL: 0
; 0000 00DA          lcd_gotoxy(2,1);
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 00DB          lcd_puts(lcd);
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 00DC          for(i=0;i<time2;i++)
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 00DD       {
; 0000 00DE          lcd_gotoxy(i,3);
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 00DF          lcd_putchar(0xff);
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 00E0        }
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 00E1        delay_ms(200);
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 00E2        }
; 0000 00E3 
; 0000 00E4 }
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 00E5 }
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0

	.DSEG
_0x1C:
	.BYTE 0x9
